{"ast":null,"code":"var _jsxFileName = \"D:\\\\SU25\\\\SDN302 - HOANNN\\\\Shopii-Template\\\\front-end\\\\src\\\\pages\\\\Payment\\\\Payment.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// Payment.jsx\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { toast } from \"react-toastify\";\nimport { createPayment, resetPayment, checkPaymentStatus, cancelPaymentPolling } from \"../../features/payment/paymentSlice\";\nimport { motion } from \"framer-motion\";\nimport { Box, Container, Typography, Radio, RadioGroup, FormControlLabel, FormControl, Button, Paper, Divider, CircularProgress, Grid } from \"@mui/material\";\nimport PaymentIcon from \"@mui/icons-material/Payment\";\nimport LocalAtmIcon from \"@mui/icons-material/LocalAtm\";\nimport HomeIcon from \"@mui/icons-material/Home\";\nimport ArrowBackIcon from \"@mui/icons-material/ArrowBack\";\n\n// ✨ CUSTOM HOOK: Tách logic polling ra khỏi component để tái sử dụng và quản lý dễ dàng hơn\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst usePaymentPolling = (orderId, shouldPoll, onPaymentSuccess, onPaymentFail, onTimeout) => {\n  _s();\n  const dispatch = useDispatch();\n  const pollIntervalRef = useRef(null);\n  const pollCountRef = useRef(0);\n  const MAX_POLLING_RETRIES = 12; // 12 lần * 5s = 60s\n  const POLLING_INTERVAL = 5000; // 5 giây\n\n  const stopPolling = () => {\n    if (pollIntervalRef.current) {\n      clearInterval(pollIntervalRef.current);\n      pollIntervalRef.current = null;\n      console.log('Polling stopped.');\n      dispatch(cancelPaymentPolling());\n    }\n  };\n  const startPolling = () => {\n    // Ngăn chặn việc chạy nhiều polling cùng lúc\n    stopPolling();\n    pollCountRef.current = 0;\n    console.log('Starting payment status polling...');\n    const checkStatus = async () => {\n      // Dừng nếu quá số lần thử\n      if (pollCountRef.current >= MAX_POLLING_RETRIES) {\n        console.log('Max polling retries reached. Stopping.');\n        stopPolling();\n        onTimeout === null || onTimeout === void 0 ? void 0 : onTimeout(); // Gọi hàm khi timeout\n        return;\n      }\n      pollCountRef.current += 1;\n      console.log(`Checking payment status for order: ${orderId} (Attempt ${pollCountRef.current}/${MAX_POLLING_RETRIES})`);\n      try {\n        const resultAction = await dispatch(checkPaymentStatus(orderId));\n        if (checkPaymentStatus.fulfilled.match(resultAction)) {\n          var _resultAction$payload, _resultAction$payload2;\n          const paymentStatus = (_resultAction$payload = resultAction.payload) === null || _resultAction$payload === void 0 ? void 0 : (_resultAction$payload2 = _resultAction$payload.payment) === null || _resultAction$payload2 === void 0 ? void 0 : _resultAction$payload2.status;\n          console.log('Payment status check result:', paymentStatus);\n          if (paymentStatus === 'paid') {\n            stopPolling();\n            onPaymentSuccess(); // Gọi hàm khi thành công\n          } else if (paymentStatus === 'failed') {\n            stopPolling();\n            onPaymentFail(); // Gọi hàm khi thất bại\n          }\n        }\n      } catch (err) {\n        console.error(\"Error checking payment status:\", err);\n      }\n    };\n\n    // Kiểm tra ngay lần đầu tiên, sau đó lặp lại\n    checkStatus();\n    pollIntervalRef.current = setInterval(checkStatus, POLLING_INTERVAL);\n  };\n  useEffect(() => {\n    if (shouldPoll && orderId) {\n      startPolling();\n    } else {\n      stopPolling();\n    }\n\n    // Hàm dọn dẹp: tự động dừng polling khi component unmount\n    return () => stopPolling();\n  }, [shouldPoll, orderId]);\n  return {\n    stopPolling\n  };\n};\n_s(usePaymentPolling, \"JCHmsv/m47uYN7mf4FbhpNuS8Jc=\", false, function () {\n  return [useDispatch];\n});\nconst Payment = () => {\n  _s2();\n  const location = useLocation();\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n\n  // Lấy dữ liệu từ location.state một cách an toàn\n  const {\n    orderId,\n    totalPrice = 0,\n    preferredMethod = 'PayOS',\n    directPayment = false\n  } = location.state || {};\n  const [selectedPaymentMethod, setSelectedPaymentMethod] = useState(preferredMethod);\n  const [showPayosIframe, setShowPayosIframe] = useState(false);\n  const {\n    payment,\n    loading,\n    error,\n    success\n  } = useSelector(state => state.payment);\n\n  // 💡 SỬ DỤNG CUSTOM HOOK\n  // Logic polling giờ đây chỉ cần khai báo, không cần viết lại trong component\n  const handlePaymentSuccess = () => {\n    toast.success(\"Thanh toán thành công!\");\n    dispatch(resetPayment());\n    sessionStorage.setItem(`payment_${orderId}_completed`, 'true'); // Đánh dấu đã xong\n    navigate('/', {\n      replace: true\n    });\n  };\n  const handlePaymentFail = () => {\n    toast.error(\"Thanh toán thất bại!\");\n    dispatch(resetPayment());\n    navigate('/payment-result', {\n      state: {\n        status: 'failed',\n        orderId\n      },\n      replace: true\n    });\n  };\n  const handlePollingTimeout = () => {\n    toast.warn(\"Không nhận được phản hồi thanh toán. Vui lòng kiểm tra lịch sử đơn hàng.\");\n    navigate('/order-history', {\n      replace: true\n    });\n  };\n  const {\n    stopPolling\n  } = usePaymentPolling(orderId, showPayosIframe,\n  // Chỉ poll khi iframe được hiển thị\n  handlePaymentSuccess, handlePaymentFail, handlePollingTimeout);\n\n  // Tự động xử lý thanh toán nếu đến từ trang lịch sử đơn hàng\n  useEffect(() => {\n    if (orderId && directPayment && selectedPaymentMethod === 'PayOS') {\n      handlePayment();\n    }\n  }, [orderId, directPayment]);\n\n  // Xử lý khi API createPayment trả về kết quả\n  useEffect(() => {\n    if (error) {\n      toast.error(error);\n      dispatch(resetPayment());\n    }\n    if (success) {\n      if (selectedPaymentMethod === 'PayOS') {\n        if (payment !== null && payment !== void 0 && payment.paymentUrl) {\n          setShowPayosIframe(true);\n          toast.info(\"Cổng thanh toán PayOS đã sẵn sàng.\");\n        } else {\n          toast.error(\"Không thể tạo liên kết thanh toán PayOS.\");\n          dispatch(resetPayment());\n        }\n      } else if (selectedPaymentMethod === 'COD') {\n        toast.success(\"Đã tạo đơn hàng COD thành công.\");\n        setTimeout(() => {\n          navigate('/payment-result', {\n            state: {\n              status: 'paid',\n              orderId\n            },\n            replace: true\n          });\n        }, 1500);\n      }\n    }\n  }, [success, error, payment, dispatch, navigate]);\n  if (!orderId) {\n    toast.error(\"Không tìm thấy thông tin đơn hàng.\");\n    useEffect(() => navigate(\"/\", {\n      replace: true\n    }), []);\n    return null;\n  }\n  const handlePayment = () => {\n    dispatch(createPayment({\n      orderId: String(orderId),\n      method: selectedPaymentMethod,\n      replaceExisting: directPayment\n    }));\n  };\n  const handleBackToHome = () => {\n    setShowPayosIframe(false);\n    stopPolling(); // Dừng polling khi người dùng chủ động thoát\n    dispatch(resetPayment());\n    navigate(\"/\");\n  };\n\n  // Các hàm render và JSX không thay đổi nhiều\n  const renderPaymentMethods = () => {\n    // ... (Giữ nguyên code render của bạn)\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxWidth: \"lg\",\n    sx: {\n      py: 6\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 192,\n    columnNumber: 5\n  }, this);\n};\n_s2(Payment, \"8bJiBb7sKN0IMI3nujhZOpNWfu4=\", false, function () {\n  return [useLocation, useNavigate, useDispatch, useSelector, usePaymentPolling];\n});\n_c = Payment;\nexport default Payment;\nvar _c;\n$RefreshReg$(_c, \"Payment\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useLocation","useNavigate","useDispatch","useSelector","toast","createPayment","resetPayment","checkPaymentStatus","cancelPaymentPolling","motion","Box","Container","Typography","Radio","RadioGroup","FormControlLabel","FormControl","Button","Paper","Divider","CircularProgress","Grid","PaymentIcon","LocalAtmIcon","HomeIcon","ArrowBackIcon","usePaymentPolling","orderId","shouldPoll","onPaymentSuccess","onPaymentFail","onTimeout","dispatch","pollIntervalRef","pollCountRef","MAX_POLLING_RETRIES","POLLING_INTERVAL","stopPolling","current","clearInterval","console","log","startPolling","checkStatus","resultAction","fulfilled","match","paymentStatus","payload","payment","status","err","error","setInterval","Payment","location","navigate","totalPrice","preferredMethod","directPayment","state","selectedPaymentMethod","setSelectedPaymentMethod","showPayosIframe","setShowPayosIframe","loading","success","handlePaymentSuccess","sessionStorage","setItem","replace","handlePaymentFail","handlePollingTimeout","warn","handlePayment","paymentUrl","info","setTimeout","String","method","replaceExisting","handleBackToHome","renderPaymentMethods","py"],"sources":["D:/SU25/SDN302 - HOANNN/Shopii-Template/front-end/src/pages/Payment/Payment.jsx"],"sourcesContent":["// Payment.jsx\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { toast } from \"react-toastify\";\nimport { createPayment, resetPayment, checkPaymentStatus, cancelPaymentPolling } from \"../../features/payment/paymentSlice\";\nimport { motion } from \"framer-motion\";\nimport {\n  Box, Container, Typography, Radio, RadioGroup, FormControlLabel,\n  FormControl, Button, Paper, Divider, CircularProgress, Grid\n} from \"@mui/material\";\nimport PaymentIcon from \"@mui/icons-material/Payment\";\nimport LocalAtmIcon from \"@mui/icons-material/LocalAtm\";\nimport HomeIcon from \"@mui/icons-material/Home\";\nimport ArrowBackIcon from \"@mui/icons-material/ArrowBack\";\n\n// ✨ CUSTOM HOOK: Tách logic polling ra khỏi component để tái sử dụng và quản lý dễ dàng hơn\nconst usePaymentPolling = (orderId, shouldPoll, onPaymentSuccess, onPaymentFail, onTimeout) => {\n  const dispatch = useDispatch();\n  const pollIntervalRef = useRef(null);\n  const pollCountRef = useRef(0);\n\n  const MAX_POLLING_RETRIES = 12; // 12 lần * 5s = 60s\n  const POLLING_INTERVAL = 5000; // 5 giây\n\n  const stopPolling = () => {\n    if (pollIntervalRef.current) {\n      clearInterval(pollIntervalRef.current);\n      pollIntervalRef.current = null;\n      console.log('Polling stopped.');\n      dispatch(cancelPaymentPolling());\n    }\n  };\n\n  const startPolling = () => {\n    // Ngăn chặn việc chạy nhiều polling cùng lúc\n    stopPolling();\n    pollCountRef.current = 0;\n    console.log('Starting payment status polling...');\n\n    const checkStatus = async () => {\n      // Dừng nếu quá số lần thử\n      if (pollCountRef.current >= MAX_POLLING_RETRIES) {\n        console.log('Max polling retries reached. Stopping.');\n        stopPolling();\n        onTimeout?.(); // Gọi hàm khi timeout\n        return;\n      }\n      \n      pollCountRef.current += 1;\n      console.log(`Checking payment status for order: ${orderId} (Attempt ${pollCountRef.current}/${MAX_POLLING_RETRIES})`);\n\n      try {\n        const resultAction = await dispatch(checkPaymentStatus(orderId));\n        if (checkPaymentStatus.fulfilled.match(resultAction)) {\n          const paymentStatus = resultAction.payload?.payment?.status;\n          console.log('Payment status check result:', paymentStatus);\n\n          if (paymentStatus === 'paid') {\n            stopPolling();\n            onPaymentSuccess(); // Gọi hàm khi thành công\n          } else if (paymentStatus === 'failed') {\n            stopPolling();\n            onPaymentFail(); // Gọi hàm khi thất bại\n          }\n        }\n      } catch (err) {\n        console.error(\"Error checking payment status:\", err);\n      }\n    };\n\n    // Kiểm tra ngay lần đầu tiên, sau đó lặp lại\n    checkStatus();\n    pollIntervalRef.current = setInterval(checkStatus, POLLING_INTERVAL);\n  };\n\n  useEffect(() => {\n    if (shouldPoll && orderId) {\n      startPolling();\n    } else {\n      stopPolling();\n    }\n\n    // Hàm dọn dẹp: tự động dừng polling khi component unmount\n    return () => stopPolling();\n  }, [shouldPoll, orderId]);\n\n  return { stopPolling };\n};\n\n\nconst Payment = () => {\n  const location = useLocation();\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n\n  // Lấy dữ liệu từ location.state một cách an toàn\n  const { orderId, totalPrice = 0, preferredMethod = 'PayOS', directPayment = false } = location.state || {};\n\n  const [selectedPaymentMethod, setSelectedPaymentMethod] = useState(preferredMethod);\n  const [showPayosIframe, setShowPayosIframe] = useState(false);\n\n  const { payment, loading, error, success } = useSelector((state) => state.payment);\n  \n  // 💡 SỬ DỤNG CUSTOM HOOK\n  // Logic polling giờ đây chỉ cần khai báo, không cần viết lại trong component\n  const handlePaymentSuccess = () => {\n    toast.success(\"Thanh toán thành công!\");\n    dispatch(resetPayment());\n    sessionStorage.setItem(`payment_${orderId}_completed`, 'true'); // Đánh dấu đã xong\n    navigate('/', { replace: true });\n  };\n\n  const handlePaymentFail = () => {\n    toast.error(\"Thanh toán thất bại!\");\n    dispatch(resetPayment());\n    navigate('/payment-result', { state: { status: 'failed', orderId }, replace: true });\n  };\n  \n  const handlePollingTimeout = () => {\n      toast.warn(\"Không nhận được phản hồi thanh toán. Vui lòng kiểm tra lịch sử đơn hàng.\");\n      navigate('/order-history', { replace: true });\n  };\n\n  const { stopPolling } = usePaymentPolling(\n    orderId,\n    showPayosIframe, // Chỉ poll khi iframe được hiển thị\n    handlePaymentSuccess,\n    handlePaymentFail,\n    handlePollingTimeout\n  );\n\n  // Tự động xử lý thanh toán nếu đến từ trang lịch sử đơn hàng\n  useEffect(() => {\n    if (orderId && directPayment && selectedPaymentMethod === 'PayOS') {\n      handlePayment();\n    }\n  }, [orderId, directPayment]);\n\n  // Xử lý khi API createPayment trả về kết quả\n  useEffect(() => {\n    if (error) {\n      toast.error(error);\n      dispatch(resetPayment());\n    }\n\n    if (success) {\n      if (selectedPaymentMethod === 'PayOS') {\n        if (payment?.paymentUrl) {\n          setShowPayosIframe(true);\n          toast.info(\"Cổng thanh toán PayOS đã sẵn sàng.\");\n        } else {\n          toast.error(\"Không thể tạo liên kết thanh toán PayOS.\");\n          dispatch(resetPayment());\n        }\n      } else if (selectedPaymentMethod === 'COD') {\n        toast.success(\"Đã tạo đơn hàng COD thành công.\");\n        setTimeout(() => {\n          navigate('/payment-result', { state: { status: 'paid', orderId }, replace: true });\n        }, 1500);\n      }\n    }\n  }, [success, error, payment, dispatch, navigate]);\n\n  if (!orderId) {\n    toast.error(\"Không tìm thấy thông tin đơn hàng.\");\n    useEffect(() => navigate(\"/\", { replace: true }), []);\n    return null;\n  }\n  \n  const handlePayment = () => {\n    dispatch(createPayment({\n      orderId: String(orderId),\n      method: selectedPaymentMethod,\n      replaceExisting: directPayment\n    }));\n  };\n\n  const handleBackToHome = () => {\n    setShowPayosIframe(false);\n    stopPolling(); // Dừng polling khi người dùng chủ động thoát\n    dispatch(resetPayment());\n    navigate(\"/\");\n  };\n  \n  // Các hàm render và JSX không thay đổi nhiều\n  const renderPaymentMethods = () => {\n      // ... (Giữ nguyên code render của bạn)\n  };\n\n  return (\n    <Container maxWidth=\"lg\" sx={{ py: 6 }}>\n        {/* ... (Giữ nguyên phần JSX giao diện của bạn) */}\n        {/* Chỉ cần đảm bảo các hàm onClick gọi đúng hàm đã định nghĩa ở trên */}\n    </Container>\n  );\n};\n\nexport default Payment;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}