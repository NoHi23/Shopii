{"ast":null,"code":"import axios from 'axios';\nimport { BACKEND_API_URI } from '../utils/constants';\naxios.defaults.withCredentials = true;\nconst api = axios.create({\n  baseURL: BACKEND_API_URI\n});\n\n// Add a request interceptor to include auth token with every request\napi.interceptors.request.use(config => {\n  // Try to get token from localStorage first (this is most common)\n  let token = localStorage.getItem('token');\n\n  // If not found, try to get from accessToken key (alternative storage key)\n  if (!token) {\n    token = localStorage.getItem('accessToken');\n  }\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  } else {\n    console.warn('No authentication token found for API request');\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\napi.interceptors.response.use(response => response, async error => {\n  const originalRequest = error.config;\n\n  // Only attempt token refresh if we have a 401 error and haven't tried refreshing yet\n  if (error.response && error.response.status === 401 && !originalRequest._retry) {\n    originalRequest._retry = true;\n    try {\n      const {\n        data\n      } = await axios.post(`${BACKEND_API_URI}/user/refresh-token`);\n\n      // Store the new token\n      localStorage.setItem('token', data.accessToken);\n      localStorage.setItem('accessToken', data.accessToken);\n\n      // Update the original request with the new token\n      originalRequest.headers['Authorization'] = `Bearer ${data.accessToken}`;\n\n      // Retry the original request\n      return api(originalRequest);\n    } catch (err) {\n      console.error('Failed to refresh token:', err);\n      // Redirect to login or dispatch logout action\n      localStorage.removeItem('token');\n      localStorage.removeItem('accessToken');\n      window.location.href = '/signin';\n    }\n  } else if (error.response && error.response.status === 403) {\n    // Redirect to a custom error page with an error message\n    const errorMessage = error.response.data.message || \"You do not have permission to access this resource.\";\n    window.location.href = `/error?status=403&message=${encodeURIComponent(errorMessage)}`;\n  }\n  return Promise.reject(error);\n});\nexport { api };","map":{"version":3,"names":["axios","BACKEND_API_URI","defaults","withCredentials","api","create","baseURL","interceptors","request","use","config","token","localStorage","getItem","headers","Authorization","console","warn","error","Promise","reject","response","originalRequest","status","_retry","data","post","setItem","accessToken","err","removeItem","window","location","href","errorMessage","message","encodeURIComponent"],"sources":["D:/SU25/SDN302 - HOANNN/Shopii-Template/front-end/src/services/index.js"],"sourcesContent":["import axios from 'axios';\nimport { BACKEND_API_URI } from '../utils/constants';\n\naxios.defaults.withCredentials = true;\n\nconst api = axios.create({\n    baseURL: BACKEND_API_URI\n});\n\n// Add a request interceptor to include auth token with every request\napi.interceptors.request.use(\n    config => {\n        // Try to get token from localStorage first (this is most common)\n        let token = localStorage.getItem('token');\n        \n        // If not found, try to get from accessToken key (alternative storage key)\n        if (!token) {\n            token = localStorage.getItem('accessToken');\n        }\n        \n        if (token) {\n            config.headers.Authorization = `Bearer ${token}`;\n        } else {\n            console.warn('No authentication token found for API request');\n        }\n        return config;\n    },\n    error => {\n        return Promise.reject(error);\n    }\n);\n\napi.interceptors.response.use(\n    response => response,\n    async error => {\n        const originalRequest = error.config;\n\n        // Only attempt token refresh if we have a 401 error and haven't tried refreshing yet\n        if (error.response && error.response.status === 401 && !originalRequest._retry) {\n            originalRequest._retry = true;\n\n            try {\n                const { data } = await axios.post(`${BACKEND_API_URI}/user/refresh-token`);\n                \n                // Store the new token\n                localStorage.setItem('token', data.accessToken);\n                localStorage.setItem('accessToken', data.accessToken);\n                \n                // Update the original request with the new token\n                originalRequest.headers['Authorization'] = `Bearer ${data.accessToken}`;\n                \n                // Retry the original request\n                return api(originalRequest);\n            } catch (err) {\n                console.error('Failed to refresh token:', err);\n                // Redirect to login or dispatch logout action\n                localStorage.removeItem('token');\n                localStorage.removeItem('accessToken');\n                window.location.href = '/signin';\n            }\n        } else if (error.response && error.response.status === 403) {\n            // Redirect to a custom error page with an error message\n            const errorMessage = error.response.data.message || \"You do not have permission to access this resource.\";\n            window.location.href = `/error?status=403&message=${encodeURIComponent(errorMessage)}`;\n        }\n\n        return Promise.reject(error);\n    }\n);\n\nexport { api };\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,eAAe,QAAQ,oBAAoB;AAEpDD,KAAK,CAACE,QAAQ,CAACC,eAAe,GAAG,IAAI;AAErC,MAAMC,GAAG,GAAGJ,KAAK,CAACK,MAAM,CAAC;EACrBC,OAAO,EAAEL;AACb,CAAC,CAAC;;AAEF;AACAG,GAAG,CAACG,YAAY,CAACC,OAAO,CAACC,GAAG,CACxBC,MAAM,IAAI;EACN;EACA,IAAIC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;;EAEzC;EACA,IAAI,CAACF,KAAK,EAAE;IACRA,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC;EAC/C;EAEA,IAAIF,KAAK,EAAE;IACPD,MAAM,CAACI,OAAO,CAACC,aAAa,GAAI,UAASJ,KAAM,EAAC;EACpD,CAAC,MAAM;IACHK,OAAO,CAACC,IAAI,CAAC,+CAA+C,CAAC;EACjE;EACA,OAAOP,MAAM;AACjB,CAAC,EACDQ,KAAK,IAAI;EACL,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAChC,CAAC,CACJ;AAEDd,GAAG,CAACG,YAAY,CAACc,QAAQ,CAACZ,GAAG,CACzBY,QAAQ,IAAIA,QAAQ,EACpB,MAAMH,KAAK,IAAI;EACX,MAAMI,eAAe,GAAGJ,KAAK,CAACR,MAAM;;EAEpC;EACA,IAAIQ,KAAK,CAACG,QAAQ,IAAIH,KAAK,CAACG,QAAQ,CAACE,MAAM,KAAK,GAAG,IAAI,CAACD,eAAe,CAACE,MAAM,EAAE;IAC5EF,eAAe,CAACE,MAAM,GAAG,IAAI;IAE7B,IAAI;MACA,MAAM;QAAEC;MAAK,CAAC,GAAG,MAAMzB,KAAK,CAAC0B,IAAI,CAAE,GAAEzB,eAAgB,qBAAoB,CAAC;;MAE1E;MACAW,YAAY,CAACe,OAAO,CAAC,OAAO,EAAEF,IAAI,CAACG,WAAW,CAAC;MAC/ChB,YAAY,CAACe,OAAO,CAAC,aAAa,EAAEF,IAAI,CAACG,WAAW,CAAC;;MAErD;MACAN,eAAe,CAACR,OAAO,CAAC,eAAe,CAAC,GAAI,UAASW,IAAI,CAACG,WAAY,EAAC;;MAEvE;MACA,OAAOxB,GAAG,CAACkB,eAAe,CAAC;IAC/B,CAAC,CAAC,OAAOO,GAAG,EAAE;MACVb,OAAO,CAACE,KAAK,CAAC,0BAA0B,EAAEW,GAAG,CAAC;MAC9C;MACAjB,YAAY,CAACkB,UAAU,CAAC,OAAO,CAAC;MAChClB,YAAY,CAACkB,UAAU,CAAC,aAAa,CAAC;MACtCC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,SAAS;IACpC;EACJ,CAAC,MAAM,IAAIf,KAAK,CAACG,QAAQ,IAAIH,KAAK,CAACG,QAAQ,CAACE,MAAM,KAAK,GAAG,EAAE;IACxD;IACA,MAAMW,YAAY,GAAGhB,KAAK,CAACG,QAAQ,CAACI,IAAI,CAACU,OAAO,IAAI,qDAAqD;IACzGJ,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAI,6BAA4BG,kBAAkB,CAACF,YAAY,CAAE,EAAC;EAC1F;EAEA,OAAOf,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAChC,CAAC,CACJ;AAED,SAASd,GAAG"},"metadata":{},"sourceType":"module","externalDependencies":[]}